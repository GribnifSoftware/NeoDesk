/* NeoDesk 3.01 by Dan Wilga
   Copyright ½ 1990, Gribnif Software.
   All Rights Reserved.
*/

#include "dither.h"

int	      Getshift(void);
int cdecl     TOS_error( long num, int errs, ... );
int cdecl     _abort(void);
void	      _chksm( char *place, int *chk, int size );
void	      _chksmstr( char *place, int *chk );
void	      _graf_mouse( int shape );
void	      _menu_bar( OBJECT *tree, int flag, int blit );
void	      _redraw_obj( Rect rect, int num );
void	      _x_help( int modal, char *topic, int caps );
void	      acc_init1( int id );
int	      add_app(void);
AV_INF *      add_av(void);
int	      add_copy( char *msg, int size );
int	      add_copy_str( char *msg, int size );
int	      add_desk(void);
int	      add_extn(void);
int	      add_group( int wind, int snum, char *path, char *name,
                  PROG_TYPE *p, NICONBLK *ib, int x, int y );
ICONBUF *     add_icon( ICONBUF **start, int *num_icons, int *icons_rem );
int	      add_macro( int type, ... );
int	      add_note( int len, char *str );
int	      add_program( char *name, PROG_TYPE *t );
int	      add_string( void **start, int *total, int *remain, void *add,
                  int addinc, long len, int id );
int	      add_thing( void **start, int *total, int *remain, void *add,
		  int addinc, long size, int id );
void	      add_to_tail( char *name, char *path, int flag, int *j );
void	      all_inactive(void);
int	      alloc_im( int **p, int pl );
int	      appl_pfind( char *msg );
int	      appl_pwrite( int hand, int len, void *msg );
void	      arrow(void);
void	      arrowed( int foo, char shift, int draw );
int	      auto_twst( int twst, int spt );
int	      av_open( char *path, int doit );
void	      av_dragto(void);
void	      backup( int flag );
void cdecl    bconws( char *ptr );
void	      bee(void);
void	      blit_form( FORM *f, int unblit );
void	      blitit( Rect *box1, Rect *box2, int tr );
void	      bmp_data( char *data, char *comp, int swidth, int height,
                  int planes, int is_ico, int pos, int invert );
int	      bootsec( int drv, Bsec *boot );
int	      c_new_dir( char *path, char *auxpath, char *n_d, int in_buf,
		  int dcreat, int *fold );
int	      cDcreate( char *path );
int	      cDdelete( char *path );
int	      cDfree( DISKINFO *buf, int driveno );
int	      cDsetdrv( int drv );
int	      cDsetpath( char *path );
int	      cFattrib( char *filename, int wflag, int attrib );
int	      cFclose( int handle );
int	      cFcreate( char *filename, int attr );
int	      cFdatime( DOSTIME *timeptr, int handle, int wflag );
int	      cFdelete( char *filename );
int	      cFopen( char *filename, int mode );
long	      cFread( int handle, long count, void *buf );
int	      cFrename( int zero, char *oldname, char *newname );
long	      cFseek( long offset, int handle, int seekmode );
int	      cFsfirst( char *filename, int attr );
int	      cFsnext( void );
long	      cFwrite( int handle, long count, void *buf );
int	      c_remdir( char *path );
void	      cancel_write(void);
int	      canw( int i );
void	      cat_date( char *ptr, int a, int b, int c, int zero );
void	      center_dials( int all );
void	      change_path( char *old, char *new, int len );
int	      check_batch( int ignore );
void	      check_bounds( int *x, int *y, int x0, int y0 );
int	      check_copy( char *src, char *dest );
int cdecl     check_dir( char *path, int draw );
void	      check_moving( int key );
int cdecl     check_prn(void);
int	      check_q(int alert);
int	      check_reorder(void);
unsigned int  chtoii(void);
char	      clean_fwrite( char noerr );
void	      clean_up(void);
void	      clip_ptrs( long len );
int cdecl     close_all(void);
void	      close_all_fwind( int apid, int ac_close );
void cdecl    close_form( Rect cbox, int flag );
void 	      close_form_reord( int desk, int menu );
void	      close_fwind( FORM *f, int ac_close, int recover_ok );
void	      close_wforms( int num, int update );
void	      close_wind(void);
void	      cond_arrow( int num );
void	      constrain( Rect *r );
#ifndef PRINT_ALLOCS
void	      cmfree( char **ptr );
#endif
int	      cmp_name(FSTRUCT *a,FSTRUCT *b);
void	      complete( char *temp, int l );
void	      confl_data( char *str, DTA *dta );
int	      consump( char drive, char *s, long l, int wnum );
void	      copy_all_files( int num, int mac, int dst_fold );
int cdecl     copy_a_buffer( char *auxpath, int *file, int *fold );
int cdecl     copy_a_file( char *src, char *dest, char *auxpath, int empty, 
		  int new_dir, int *file, int *fold );
int	      copy_cicon( int pl, CICON *from, CICON *to );
int cdecl     copy_files( char *src, char *dest, int *file, int *fold, int ignore_1st );
void cdecl    copy_free(void);
void	      copy_from_w( int item, int wind, char *path );
void cdecl    copy_init(void);
void	      cpy_from_d( char *src, char *dest, int ignore );
int	      create_tail( int ignore, char do_ttp, char (*npi_parm)[5][39], char *path, char *dflt_tail, char docpath );
int	      dcreate( char *path );
void	      de_act( int except, int wind );
void	      de_act_d( int except );
void	      de_act_other( int flag );
void	      de_act_w( int except, int wind );
int	      desk_path( char *p, int i );
int	      dflt_icon( char c, int type );
int 	      disp_pic( PICTURE *pic );
void	      do_box( int flag );
void	      do_desk(void);
void	      drag_free(void);
void cdecl    draw_box( int *box );
int cdecl     draw_d_icon( PARMBLK *pb );
int cdecl     draw_desk( PARMBLK *pb );
void	      draw_icon( NICONBLK *i_ptr, int x, int y, char *text, unsigned int c, int s, int w );
int	      drv_inf( int wnum, int num );
long	      drvmap(void);
long	      dsetpath( char *path );
int	      ed_wind_type( int ind );
void	      err_del(void);
void	      error( int num );
int	      f_alert1( char *msg );
int	      f_writepro(void);
extern cdecl  fasttext( int x, int y, char *string, char *fontptr, 
		  int width, int height );
int	      fdelete( char *ptr, int flg, int num );
int	      fileinf( int wnum, char *path, int type, int *date, long size, int oldrw );
int	      filter_it( FILT_TYPE *f, DTA *dta, char *templ );
int	      find_d( int x0, int y0 );
int	      find_di( int type, int *num );
int	      find_dl( int ch, int *num );
int	      find_extn( char *ptr );
void	      find_handle(void);
copy_struct * find_item( char *item, BUF_HDR **buf, copy_struct *cs,
		  int flag );
int	      find_parent( OBJECT *tree, int parent );
int	      find_place( int func( int a, int b ) );
int	      find_w( int x0, int y0, int wind );
void	      finish_load( char is_ext );
int	      first(int err);
int	      fit_pic( PICTURE *p, int inside, int aspect, int w, int h );
int	      fix_bootsec( Bsec *boot );
int	      fix_coord( int to_coord, COORD *c, int num, int scale );
int	      fix_icon( ICONBUF *ib );
int	      fix_rez( int *data, int **out, int pl, int dplanes, int (*rgb)[16][3], int devspef );
void	      floprate( int drv, int *val );
void	      flush(void);
void	      fop_nums( int mode, char *path );
void	      force( int drv );
void	      form_copy( int flag );
void	      form_draw( FORM *f, int num, int edit );
void	      form_path( int num );
void	      form_pos( FORM *f, int chop );
int	      format_sec( char *ptr, int drive, int spt, int trak, int s, int twst );
void	      fpf(int fh, char *fmt, ...);
void	      fps(char *s, int fh);
void	      free_av(void);
void	      free_clip(void);
void          free_copyq(void);
void	      free_desk(void);
void 	      free_desk_pic(void);
void	      free_icon( CICON **ci, CICON *curr, int root );
void	      free_iconbuf( ICONBUF **i, int start, int *num, int *rem );
void	      free_nib_icon( NICONBLK *n );
void	      free_nic( ICONBUF **i, int *num );
void	      free_notes(void);
void	      free_macros(void);
void 	      free_pic( PICTURE **pic, int do_pic );
void	      free_show(void);
void	      from_filename( char *src, char *dest, int flg );
int	      fselect( char *path, char *templ, char *ltempl, char *title );
long	      get_OS(void);
char *	      get_acc_name( char *name, char *temp );
void	      get_ack( int *buf, int dest );
void	      get_all_icons(void);
void	      get_d_icon( int ind );
void	      get_desktop_match( int ind );
int	      get_drive( int index );
FORM *	      get_fileform(void);
void	      get_filt_templ( FILT_TYPE *f, char *temp );
void	      get_full_name( char *buf, int num, int wind );
void	      get_icn_matches( int num );
void	      get_icon_match( char *path, char *str, NICONBLK **ib, int type );
void	      get_icon_names(void);
int	      get_line( int file );
int	      get_line( int file );
void	      get_max_icon(int num);
void	      get_neo_accs(void);
SEL_ICON *    get_sel_icon( SELICON_DESC *f, int reselect );
SEL_ICON *    get_msel_icon( SELICON_DESC *f, int reselect, int record );
char *	      get_str( OBJECT *o, int num );
long	      get_timer(void);
void	      get_top_wind(void);
void	      get_volname( char *path, int flag );
void	      get_wcolors(void);
void	      get_widths(void);
void	      group_unit( int wind, int *w, int *h );
void cdecl    gtext( int x, int y, unsigned char *str, int fnum, int center );
void	      gtext2( int x, int y, unsigned char *str, int fnum, int center, int mode, int color );
int	      hide_if( OBJECT *form, int num, int truth );
int	      icon_width( int len );
void	      icon_volnames(void);
int	      inf_load( int err, int file, int is_ext );
void	      info(void);
void	      info_redraw(void);
void	      info_text(void);
void	      init_desktop( int old, int setup );
void	      init_groupinf( OBJECT *o, GROUP_HDR *gh, int nohide );
int	      init_gui( NEO_ACC *nac, int aes_ver );
void	      init_inf_offs(void);
void	      init_screen(void);
void	      install_devices( int iconedit );
int	      int86( void *p );
int	      intersect( char *path1, char *path2 );
void	      into_TTP( char *str );
PROG_TYPE     iprog_type( int wnum, char *str );
int	      is_group( FSTRUCT *fs, char *temp, int close );
int	      is_locked( int drv );
int	      is_sel( int num );
void	      iso( char *path );
void	      isolate(void);
#ifndef PRINT_ALLOCS
void *	      lalloc( long size, int id );
void *	      lalloc2( long size, int id );
#endif
int	      load_bmp( int h, int is_ico, PICTURE *pic );
int 	      load_desk_pic(void);
void	      load_fonts(void);
int	      load_img( int h, PICTURE *pic );
int 	      load_pic( int hand, char *filename, PICTURE **pic, char *title );
void	      load_rsc( char *p, int center );
void	      load_set( SET_STRUCT *s );
void	      lock_drive( int drive, int handle, int lock );
long	      long86( void *p );
#ifndef PRINT_ALLOCS
int	      lfree( void *xfb );
#endif
int	      lfreeall( int id );
void	      list_setup( int num, int da );
#ifndef PRINT_ALLOCS
int	      lrealloc( void **xfb, long size );
int	      lshrink( void *block, long newsiz );
#endif
int	      lrsrc_gaddr( int type, int index, void *addr );
void	      m_formfeed(void);
void	      m_newrez(void);
void	      m_open(void);
void	      m_printdsk(void);
void	      m_prndir(void);
void	      m_quit(int i);
void	      m_reorder(void);
int	      m_savegrp( int alert );
void	      m_search(void);
void	      m_showinf( int flag, int all );
void	      m_update( int force );
void	      mac_err(void);
int	      mac_mxref( int type, int num, int to_mac );
void	      mac_play_icons(void);
void	      mac_rec_icons( SELICON_DESC *f );
int	      mac_seld( int *ind );
void	      macro_ind(void);
int	      main_equivs( int *event, int sh, int key, int *buf );
int	      main_macro( int buffer[] );
void	      map_tree( OBJECT *tree, int this, int last, int func( OBJECT *tree, int tmp ) );
int	      match( char *a, char *b );
int	      match2( char *a, char *b );
void	      memclr( void *ptr, unsigned long len );
void	      memstat( long *in_use, long *allocated );
int	      menu_equiv( OBJECT *o, int parent, int sh, int key );
void 	      menu_msg( char *msg );
void	      missing_file( char *name );
void	      move_form( int i );
void	      msg_copy( int *buf );
void	      msg_del( int *buf );
int	      neo_ac_open( char *s );
void	      neo_ac_open_id( int h );
void	      neo_acc_init(void);
int	      neo_da( char *name );
void	      new_colors(void);
void	      new_group( GROUP_HDR *gh, int wnum );
void	      new_inf_name(void);
void	      new_path( int off, int upd );
void	      new_sort( int type );
void	      new_volname( int wnum, char *ptr, int ch );
void	      next_macs(void);
void	      npi_argv( int off );
int	      npi_type( char *path, char *name );
void	      obj_enab( OBJECT *form, int truth, int num, ... );
void	      obj_ltrue( OBJECT *form, int truth, int count, int start );
void	      obj_selec( OBJECT *form, int truth, int num, ... );
void	      obj_true( OBJECT *form, int truth, int start );
void	      obj_true1( OBJECT *form, int truth, int start );
void	      open_all( int clear, int nob4 );
void	      open_d_icon( int i );
void	      open_drive( int ind );
void	      open_folder( int num );
int	      open_group( char *ptr );
void	      open_prn(void);
void	      open_program( int num, char *name, char *path, PROG_TYPE type, char *parm, 
		  char (*npi_parm)[5][39], int reopen, int set_path );
void	      open_text( char *name, char *path, int apps );
int	      open_to_path( char *str );
int	      _open_w_icon( int ind, char *filename, int w_num, int wtype, PROG_TYPE *pt, int type, int i );
int	      open_w_icon( int i );
int	      open_window(void);
int	      pathend( char *ptr );
int 	      pcol( int c );
int	      prep_save( char *file );
void	      prev_blit( FORM *f, int unblit );
void	      prn_str(char *s);
int cdecl     print_file( char *name );
int	      print_tree( int sp );
PROG_TYPE     prog_type( int wnum, char *ptr );
int	      rc_intersect(Rect *r1, Rect *r2);
void	      rcv_mac_msg( int buffer[] );
void	      rdrw_al0(void);
void	      rdrw_all(void);
int	      read_dflt_nic( int some );
int	      read_fblock(void);
int	      read_nic_header( int hand, unsigned int *entries, void *ni, unsigned int *codelen );
int	      read_nic( int hand, int some, NIC_INFO *nif, ICONBUF **start, int *num_icons, int *icons_rem );
int	      read_npi( NPI_TYPE *npi, char *path );
void	      read_q_set(void);
int	      readboot( int drv );
void	      really_reload_inf( char *name, int num, int is_ext );
void	      recalc_wind(void);
void	      redo_stat( int stat, int s, int t, int disk, int flag );
void	      redraw( Rect rbox, int pos, int high );
void	      redraw_arrows(void);
void cdecl    redraw_desk( int x, int y, int w, int h, int num );
void	      redraw_mover( int num );
void	      redraw_obj( Rect rect, int num );
void	      redraw_slider( int slid, int part );
void	      redraw_wind( Rect rect, int flag );
void	      reformat_msg(void);
void	      reload( char *name );
void	      reload_inf( int macr );
void	      remove_clip( void );
void	      remove_icon( int num );
void	      reset_conterm(void);
void cdecl    reset_desktop(void);
void 	      reset_icbs( ICONBUF *icb, int i, int max );
void	      reset_icons(void);
void	      reset_inf( int err, int is_ext );
void	      restore_environ( FORM *f );
void	      rmv_icon_redraw( int num );
int cdecl     rubber_box( int x0, int y0, Rect *box, int flag );
void	      run_acc_prog( int type, char *path, char *tail, int *stat, int set_path );
void	      s_reset_icons(void);
void cdecl    save_desktop(void);
int	      save_group( char *path, GROUP_DESC *gd, int wnum );
int	      save_img( char *name, PICTURE *pic );
int	      saveinf( int hand );
int	      scan_inf_line( char *buf, int i );
int	      scan_sel( int start, int end );
int	      search_open( char *path, char *name );
void	      select( Rect box, int w_hand );
void	      select_all(void);
void	      select_d( int icon, int state );
void	      select_w( int icon, int state, int wind, int change );
void	      set_arrows(void);
void	      set_attrib(int flag);
void	      set_avserv(void);
void cdecl    set_clip( int *arr, int mode );
void cdecl    set_clp_rect( Rect *clip, int mode );
void	      set_conterm(void);
/*%void	      set_equivs( OBJECT *o, int parent );*/
int	      set_filename( FORM **src, int modal, int fl, int ind, char *ptr1, char *ptr2 );
void	      set_icontxt(void);
void	      set_isclip( int n );
void	      set_longedit( OBJECT *o, int ind, int count );
void	      set_menuseg(void);
void	      set_newdesk( OBJECT *o, int wind );
void	      set_temps( int dplanes );
void	      set_wfile(void);
void	      set_window(void);
long	      setcolor( int num, long val );
void	      short_path( char *path, char *s, int len, int maxlen );
int	      slashes( char *ptr );
int	      slashes( char *ptr );
int	      slider(void);
void	      sort(void);
void	      sortit( int start, int end );
void	      sortswap( char *src, char *dest, int start );
char *        spathend( char *path );
void	      spf(char *buf, char *fmt, ...);
void	      spfcat(char *buf, char *fmt, ...);
int cdecl     sscnf( char *buf, char *fmt, ... );
int	      sscnf_( char *buf, char *fmt, int **arg );
int	      start_ext_form( int apid, long type, FORM_TYPE *ft );
int	      start_fform( FORM_TYPE *ft, int apid, long type );
void	      stop_it(void);
void	      tandd_to_str( int *time, char *str );
int	      test_filename( char *from, char *to, int flag );
int	      test_rez(void);
void	      text_menu_check(void);
unsigned long time_now(void);
void	      to_dirname( char *ptr, char *buf );
void	      to_filename( char *src, char *dest );
int	      to_stand( PICTURE *picture );
void	      to_tandd( unsigned long time, int *bytes );
int	      too_many_dirs( char *path );
void	      top_bar(void);
int	      trans_gmenu( int wind, int num, int from_drv );
int	      transform_pic( PICTURE *pic, int stand );
void	      translate( int ind, long parm1, long parm2, int parm3, int parm4 );
int	      trash_all( char *path );
int cdecl     trash_files( char *path, int *file, int *fold );
void	      trash_init( char *temp );
int	      tree_init( char *path, TREE *tree );
int	      tree_next( TREE *tree );
void	      treeini0( char *path, TREE *tree );
void	      txt_cons( long cons, char *str2 );
void	      txt_menu_copy(void);
void          unpak_rgb( unsigned char *c, int *rgb );
void	      unset_w(void);
void	      update_drive( char *path, int flag );
int	      update_forms( int use );
void	      update_npi( NPI_TYPE *npi, char *path );
void	      update_othwind( int num, int dsk );
int	      uppath( char *path );
void	      use_gmenu( int wind, int item );
/*%void	      use_mainpop( int item );*/
void	      use_menu( int wind, int item );
int 	      view_pic( int hand, char *name );
void	      volname_redraw(void);
void cdecl    warmboot(void);
int	      wf_owner( int wh );
void	      wind_lock( int lock );
int	      wind_xref( int num );
void	      write_acc_bad(void);
void	      write_all_acc( int *cmsg );
int	      write_back(void);
void	      xfix_cicon (unsigned int *col_data, long len, int old_planes, int new_planes, MFDB *s, int devspef);
int	      Nrsc_load( char *name, DTA *dta, RSHDR **out );

/* Dialogs */
int	      start_form( int num );
void	      use_form( int hand, int num );
int	      i_insticon( OBJECT *o, FORM *f );
int	      x_insticon( OBJECT *o, int num, FORM *f );
int	      i_filter( OBJECT *o, FORM *f );
int	      x_filter( OBJECT *o, int num, FORM *f );
int	      t_filter( OBJECT *o, int num, FORM *f );
int	      i_search( OBJECT *o, FORM *f );
int	      x_search( OBJECT *o, int num, FORM *f );
int	      i_group( OBJECT *o, FORM *f );
int	      x_group( OBJECT *o, int num, FORM *f );
int	      i_about( OBJECT *o, FORM *f );
int	      x_null( OBJECT *o, int num, FORM *f );
int	      i_gitem( OBJECT *o, FORM *f );
int	      x_gitem( OBJECT *o, int num, FORM *f );
int	      i_snap( OBJECT *o, FORM *f );
int	      x_snap( OBJECT *o, int num, FORM *f );
int	      t_snap( OBJECT *o, int num, FORM *f );
int	      i_memory( OBJECT *o, FORM *f );
int	      x_memory( OBJECT *o, int num, FORM *f );
int	      u_memory( OBJECT *o, FORM *f );
int	      i_savecfg( OBJECT *o, FORM *f );
int	      x_savecfg( OBJECT *o, int num, FORM *f );
int	      i_ttp( OBJECT *o, FORM *f );
int	      x_ttp( OBJECT *o, int num, FORM *f );
int	      t_ttp( OBJECT *o, int num, FORM *f );
int	      i_more( OBJECT *o, FORM *f );
int	      t_more( OBJECT *o, int num, FORM *f );
int	      x_more( OBJECT *o, int num, FORM *f );
int	      i_filepref( OBJECT *o, FORM *f );
int	      x_filepref( OBJECT *o, int num, FORM *f );
int	      i_accpref( OBJECT *o, FORM *f );
int	      x_accpref( OBJECT *o, int num, FORM *f );
int	      i_infpref( OBJECT *o, FORM *f );
int	      x_infpref( OBJECT *o, int num, FORM *f );
int	      i_extpref( OBJECT *o, FORM *f );
int	      t_extpref( OBJECT *o, int num, FORM *f );
int	      x_extpref( OBJECT *o, int num, FORM *f );
int	      i_pthpref( OBJECT *o, FORM *f );
int	      x_pthpref( OBJECT *o, int num, FORM *f );
int	      i_folder( OBJECT *o, FORM *f );
int	      x_folder( OBJECT *o, int num, FORM *f );
int	      i_drvinf( OBJECT *o, FORM *f );
int	      x_drvinf( OBJECT *o, int num, FORM *f );
int	      i_fileinf( OBJECT *o, FORM *f );
int	      x_fileinf( OBJECT *o, int num, FORM *f );
int	      i_foldinf( OBJECT *o, FORM *f );
int	      x_foldinf( OBJECT *o, int num, FORM *f );
int	      i_grpinf( OBJECT *o, FORM *f );
int	      x_grpinf( OBJECT *o, int num, FORM *f );
int	      i_applic( OBJECT *o, FORM *f );
int	      t_applic( OBJECT *o, int num, FORM *f );
int	      x_applic( OBJECT *o, int num, FORM *f );
int	      i_npi( OBJECT *o, FORM *f );
int	      t_npi( OBJECT *o, int num, FORM *f );
int	      x_npi( OBJECT *o, int num, FORM *f );
int	      i_format( OBJECT *o, FORM *f );
int	      t_format( OBJECT *o, int num, FORM *f );
int	      x_format( OBJECT *o, int num, FORM *f );
int	      i_diskop( OBJECT *o, FORM *f );
int	      x_diskop( OBJECT *o, int num, FORM *f );
int	      t_diskop( OBJECT *o, int num, FORM *f );
int	      u_diskop( OBJECT *o, FORM *f );
int	      i_dialpref( OBJECT *o, FORM *f );
int	      x_dialpref( OBJECT *o, int num, FORM *f );
int	      i_editenv( OBJECT *o, FORM *f );
int 	      t_editenv( OBJECT *o, int num, FORM *f );
int	      x_editenv( OBJECT *o, int num, FORM *f );
int	      i_ededit( OBJECT *o, FORM *f );
int	      x_ededit( OBJECT *o, int num, FORM *f );
int	      i_rename( OBJECT *o, FORM *f );
int	      x_rename( OBJECT *o, int num, FORM *f );
int	      i_prndir( OBJECT *o, FORM *f );
int	      x_prndir( OBJECT *o, int num, FORM *f );
int	      i_copyall( OBJECT *o, FORM *f );
int	      t_copyall( OBJECT *o, int num, FORM *f );
int	      x_copyall( OBJECT *o, int num, FORM *f );
int	      i_deskpr( OBJECT *o, FORM *f );
int	      t_deskpr( OBJECT *o, int num, FORM *f );
int	      x_deskpr( OBJECT *o, int num, FORM *f );
int	      i_nameconfl( OBJECT *o, FORM *f );
int	      x_nameconfl( OBJECT *o, int num, FORM *f );
int	      u_nameconfl( OBJECT *o, FORM *f );
int	      i_fileop( OBJECT *o, FORM *f );
int	      x_fileop( OBJECT *o, int num, FORM *f );
int	      t_fileop( OBJECT *o, int num, FORM *f );
int	      u_fileop( OBJECT *o, FORM *f );
int	      i_filefilt( OBJECT *o, FORM *f );
int	      x_filefilt( OBJECT *o, int num, FORM *f );
int	      i_windpr( OBJECT *o, FORM *f );
int	      x_windpr( OBJECT *o, int num, FORM *f );
int	      t_windpr( OBJECT *o, int num, FORM *f );
int	      i_newrez( OBJECT *o, FORM *f );
int	      t_newrez( OBJECT *o, int num, FORM *f );
int	      x_newrez( OBJECT *o, int num, FORM *f );
int	      i_notepr( OBJECT *o, FORM *f );
int	      x_notepr( OBJECT *o, int num, FORM *f );
int	      t_notepr( OBJECT *o, int num, FORM *f );
int	      i_foldconfl( OBJECT *o, FORM *f );
int	      x_foldconfl( OBJECT *o, int num, FORM *f );
int	      i_macro( OBJECT *o, FORM *f );
int	      x_macro( OBJECT *o, int num, FORM *f );
int	      t_macro( OBJECT *o, int num, FORM *f );
int	      i_newname( OBJECT *o, FORM *f );
int	      x_newname( OBJECT *o, int num, FORM *f );
int	      i_opfyi( OBJECT *o, FORM *f );
int	      i_helpfyi( OBJECT *o, FORM *f );
int	      x_fyi( OBJECT *o, int num, FORM *f );
int	      u_fyi( OBJECT *o, FORM *f );
int	      i_picopt( OBJECT *o, FORM *f );
int	      x_picopt( OBJECT *o, int num, FORM *f );

/* INF_OFFS.C */
int	      winf_deskicn( int num, void **point, void **out );
int	      winf_applic( int num, void **point, void **out );
int	      winf_extens( int num, void **point, void **out );
int	      winf_env( int num, void **point, void **out );
int	      winf_dialog( int num, void **point, void **out );
int	      winf_av( int num, void **point, void **out );
int	      rinf_deskicn( char *buf, void **point, char *fmt );
int	      rinf_applic( char *buf, void **point, char *fmt );
int	      rinf_extens( char *buf, void **point, char *fmt );
int	      rinf_env( char *buf, void **point, char *fmt );
int	      rinf_dialog( char *buf, void **point, char *fmt );
int	      rinf_av( char *buf, void **point, char *fmt );


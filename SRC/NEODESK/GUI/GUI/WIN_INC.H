#ifndef _WIN_INC_
  #define _WIN_INC_

#include "tos.h"
#include "xwind.h"
#include "graphics.h"
#include "multevnt.h"

#ifndef PRINT_ALLOCS
int     lfree(void *addr);
void    *_lalloc(long size, int id);
#else
void	*__p_lalloc( long size, int id, char *file, int line );
int	__p_lfree(void *addr, char *file, int line);
#endif
int 	lfreeall(int id);
extern void breakpoint(void);
Rect_list *add_rect( Rect_list *r, Rect_list **root );
int	ac_open( ACC_LIST *acc, int hand );
BASPAG *acc_run( char *path );
void	accs_obj( int tears );
void    add_rects( Rect *curr, Rect *add );
  typedef struct{ int w, h, x, y, bx, by, bw, bh; } GDB;
  typedef struct{ int x, y; } GDBO;
int	adj_atari3d( OBJECT2 *o, Rect *r, unsigned int *col, char *move );
void	adjust_rect( OBJECT *obj, Rect *r, int frame );
void    all_gadgets( int pl );
void	alt_redraw( long tree, int obj, int undraw );
void	_arrow_dial( int *msg );
long    but_spec( OBJECT *o );
int cdecl dragbox_graf( int blit, int *ox, int *oy, int gr_dwidth, ... );
int	change_objc( OBJECT *tree, APP *ap, int obj, Rect *clip,
            int new, int redraw );
void    choose_menu( Window *w );
void	close_all( APP *ap, int all );
void	close_del( Window *w );
void	close_sh( int delete );
int     close_window( int handle );
int     create_window( int type, int xtype, Rect *r );
int	cycle_top( APP *ap );
void	debug_alert( char *name, char *msg, int i );
int     delete_window( int handle );
void	del_acc_name( int id );
void	del_all_msg( int type, APP *ap );
void	del_msg( MSGQ *msg );
int	dflt_clip(void);
void	dflt_clip_ini( Rect *r );
void    domenu( APP *ap, int *buf, int keybd );
void	draw_menu(void);
void	draw_wmenu( Window *w );
void	drw_alt( OBJECT *tree, int num, int undraw );
void	edit_curs( OBJECT *tree, int type, int cont );
int	_evnt_timer( int locount, int hicount );
void	exec_shell(void);
void	exit_msg( int term_id, int to_id, int ret );
void	exit_win_dial( Window *w );
APPFLAGS *find_flags( char *name );
int	find_alt( OBJECT *ob, int obj );
void	find_oldup(void);
void	find_menu_id( int *buf, int hand );
int     gfind_parent( OBJECT *tree, int parent );
Window *find_window( int handle );
void	fix_cicon( unsigned int *col_data, long len, int old_planes, int new_planes, MFDB *s );
void	fix_mint_id(void);
void    fix_trees(void);
int	_form_alert( int dflt, char *str );
int	_form_button( OBJECT *tree, APP *ap, int obj, int clicks, int *next_obj );
int	_form_center( OBJECT *tree, Rect *r, int frame );
int	_form_dial( int fo_diflag, int fo_dilittlx, int fo_dilittly, int fo_dilittlw,
    	int fo_dilittlh, int fo_dibigx, int fo_dibigy, int fo_dibigw, int fo_dibigh );
int	form_event( long tree, int event( long tree ), int outside );
void	form_init( OBJECT *tree );
void	form_redraw_all( long tree, int undraw );
void	form_reinit( int obj, int edit, int idx, int curs );
int	__form_keybd(long tree, int edit_obj, int kr, int *out_obj, int *okr );
void    free_rects( Window *wind );
int	_fsel_exinput( char *path, char *file, long but, long title );
void	fsel_type(void);
void	_gad_redraw( int w_handle, Rect *r, int obj );
int	gem_cnf( int mode, char *buf );
char   *get_butstr( long tree, int obj, int *is_ted, int disab );
void	get_mks(void);
int	get_obdesc( OBJECT2 *o, Rect *r, OBDESC *od );
int	get_shline( char *buf );
long    get_spec( OBJECT *tree );
int	get_state( OBJECT2 *o, int *state, int *magic,
        int *effects, unsigned long *l );
int	get_topw(void);
char	get_typex( APP *ap, OBJECT2 *o );
long	getkey(void);
int	go_acc( APP *old, BASPAG *bp );
int	go_proc(void);
int     _graf_dragbox( GDBO *go, GDB *gdb, int mode );
int	_graf_mouse( int num, MFORM *m, int set4app );
int	_graf_watchbox( OBJECT *tree, APP *ap, int obj, int in, int out );
int	growbox( Rect *start, Rect *end );
int	has_key(void);
int	hide_if( OBJECT *tree, int truth, int idx );
int     in_rect( int x, int y, Rect *r );
int	init_aph( int apno );
void	init_win_dial( Window *w );
int     gintersect( Rect r1, Rect r2, Rect *res );
int	is_key( KEYCODE *k, unsigned char shift, unsigned int key );
int	is_xusrdef( APP *ap, OBJECT *tree );
int	kbshift(void);
int	load_acc( int first );
void	lock_menu( int lock );
void    map_tree( OBJECT *tree, int this, int last, int func( OBJECT *tree, int tmp ) );
int	pnmatch( char *str, char *pat );
int     mblit( int flag, Rect *r );
int	gmenu_bar( OBJECT *tree, int flag );
int	menu_equiv( int *buf, int lastsh, int lastkey );
void    menu_evnt( APP *ap, int *buf );
void	menu_left( Window *w );
void	menu_right( Window *w );
void    menu_rec( Window *w, int i, int title );
  typedef struct{ int x, y, b, k; } Mouse;
int	_menu_tnormal( OBJECT *tree, int obj, int check );
int     mks_graf( Mouse *out, int flag );
void    move_menu( int flag, Window *w );
void	_multi_evnt( EMULTI *a, int *msgbuf );
void	my_pexec( BASPAG *bp );
int	_multi( long tree );
void	new_desk( int mode, APP *ap );
void	new_flags(void);
void	newtop( int type, int hand, int id );
void	no_desk_own(void);
void	no_memory(void);
  typedef struct{ int start, depth, xclip, yclip, wclip, hclip; } ODRAW;
int	obfix( OBJECT *tree, int ind );
void	ob_fixspec(void);
int	_obj_draw( OBJECT *tree, int this, int depth, int xclip,
        int yclip, int wclip, int hclip );
int     _objc_draw( OBJECT2 *tree, APP *ap, int start, int depth, int xclip,
        int yclip, int wclip, int hclip );
  typedef struct{ int start, depth, mx, my; } OFT;
void	obj_extent( OBJECT *tree, int obj, Rect *r );
int     _objc_find( OBJECT *tree, OFT *o );
void    objc_off( OBJECT *tree, int obj, int *x, int *y );
void    objc_xywh( long tree, int obj, Rect *p );
int	gobjhand( int cdecl func( int hand, int obj ), int hand, int obj );
int     goffset_objc( OBJECT *tree, int obj, int *xy );
  typedef struct{ int handle; Rect r; } OWT;
void	open_sh( char *name );
void	opn_wind( Window *wind );
void	pad_acc_name( char *s2 );
void	part_draw( OBJECT *tree, int root, int first, int last );
char    *pathend( char *path );
void	pline_5(void);
int 	prop_extent( int font, char *str, int *num );
void    recalc_inner( Rect outer, Rect *inner, int type, int xtype );
void	recalc_outer( Rect inner, Rect *outer, int type, int xtype );
void    recalc_window( int handle, Window *wind, long flag );
void	redraw_all( Rect *r );
void    gredraw_obj( Window *w, int obj, Rect *ir );
int     redraw_window( int handle, Rect *area, int add );
void    regenerate_rects( Window *wind );
void	reopen_win( int id );
void    reset_butq(void);
void	reset_clip(void);
  typedef struct{ int w, h; } RGBO;
int     rubberbox_graf( Rect *ri, RGBO *ro );
void	run_acc( BASPAG *bp );
int	scan_alts( OBJECT *tree, char ch, char is_alt );
int	scroll_wdial( Window *w, int flag, int val, int realtime );
void	send_term( APP *ap, int why, int alw_term );
int	set_asc_cur( int x, int y );
void	set_curapp( APP *ap );
void	set_dc( int r );
void	set_dfltdesk( OBJECT *tree, int count );
void	set_equivs( Window *w );
void    set_exec( char *path, char *tail, char *env );
void    set_if( int *num, int **val );
void	set_multi( int multi );
void	set_update(void);
  typedef struct{ int handle, change, i1, i2, i3, i4; } SWT;
int	_set_window( int handle, int field, ... );
void	shel_disp( char *title, int num );
BASPAG *shel_context( BASPAG *bp );
int     shel_exec(void);
int	_shel_find( char *dflt, char *buf, char **paths, char *ext );
void	shel_path( char *path );
void	shel_rpath(void);
int	shel_setup(void);
int	_shel_write( int doex, int gr, int gem, char *name, char *tail );
int	shrinkbox( Rect *start, Rect *end );
void    spf(char *buf, char *fmt, ...);
int	sspf_alert( char *tmpl, char *s );
void	switch_menu( APP *ap );
void	switch_mouse( APP *ap, int nonz );
int	sw_next_app( APP *curr );
int 	ted_font( int font, int id, int point, int *cw, int *ch );
void	test_unload(void);
unsigned long tic(void);
int	toggle_multi( APP *ap, int sleep, int alert );
void	to_larr( int x, int y, int w, int h );
void	to_sleep( int mask, int sleep, APP *ap );
void	top_menu(void);
void	trans_cicon( CICONBLK *c, CICON *best, int alloc );
void	user_menu(void);
int     userdef( int cdecl code(struct __parmblk *u), struct __parmblk *u );
void	vdi_box( int intcol, int inter, int style, int writ, Rect *r );
typedef struct { OBJECT2 *o; int ind;  } TINI;
void    vdi_text( Rect *r, int just, int font, int id, int point, char *str, int mode, int color, int effects, TINI *specl, int clip );
int	wind_menu(void);
int	wind_dial( long tree );
int	_wind_close( int handle );
int	_wind_delete( int handle );
int	_wind_get( int handle, int type, ... );
void	_wind_new(void);
int	_wind_open( int handle, int x, int y, int w, int h );
void	_wind_set( Window *w, int item, int num );
int	_wind_update( int wi_ubegend );
int	xscan( char *buf, char *fmt, ... );
void	xor_col( unsigned int *col );
int     _xobjc_edit( OBJECT *tree, APP *ap, int edit_obj, long kr, int *idx, int mode );
void	_x_appl_free(void);
int	_x_appl_term( int id, int ret, int alert, int in_t1 );
int	__x_appl_term( int id, int ret, int alert );
int	_x_form_mouse( OBJECT *tree, APP *ap, int mx, int my, int clicks, int *edit_obj,
    int *next_obj, int *ed_idx );

OBJECT *u_object( OBJECT *o, int num );
char   *u_ptext( OBJECT *o, int num );
TEDINFO *u_tedinfo( OBJECT *o, int num );

#endif
